// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = "mongodb://root:123456@localhost:27017/mydb?authSource=admin&retryWrites=false&w=majority"
}

model User {
  id          String    @id @map("_id")
  email       String    @unique
  username    String    @unique
  password    String
  name        String
  image       String?
  posts       Posts[]
  following   Follows[] @relation("Following")
  followers   Follows[]
  likes       Likes[]
  comments    Comments[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  user1Id     Chats[]   @relation("user1")
  user2Id     Chats[]   @relation("user2")
  message     Messages[]

  @@map("users")
}

model Posts {
  id          String    @id @map("_id")
  author      User      @relation(fields: [authorId], references: [id])
  authorId    String
  description String?
  image       String
  likes       Likes[]
  comments    Comments[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("posts")
}

model Follows {
  id          String    @id @map("_id")
  follower    User      @relation(fields: [followerId], references: [id])
  followerId  String
  following   User      @relation("Following", fields: [followingId], references: [id])
  followingId String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  @@map("follows")
  @@unique([followerId, followingId])
}

model Likes {
  id          String    @id @map("_id")
  user        User      @relation(fields: [userId], references: [id])
  userId      String
  post        Posts     @relation(fields: [postId], references: [id])
  postId      String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("likes")
}

model Comments {
  id          String    @id @map("_id")
  user        User      @relation(fields: [userId], references: [id])
  userId      String
  post        Posts     @relation(fields: [postId], references: [id])
  postId      String
  message     String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("comments")
}

model Messages {
  id          String    @id @map("_id")
  user        User      @relation(fields: [userId], references: [id])
  userId      String
  message     String
  chat        Chats     @relation(fields: [chatId], references: [id])
  chatId      String
  createdAt   DateTime  @default(now())

  @@map("messages")
}

model Chats {
  id          String    @id @map("_id")
  user1       User      @relation("user1", fields: [user1Id], references: [id])
  user1Id     String
  user2       User      @relation("user2", fields: [user2Id], references: [id])
  user2Id     String
  messages    Messages[]
  createdAt   DateTime  @default(now())
  lastMessage DateTime  @default(now())

  @@unique([user1Id, user2Id])
  @@map("chats")
}
